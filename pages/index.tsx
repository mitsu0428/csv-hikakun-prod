import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useState } from 'react'
import { readString } from 'react-papaparse'
import styles from '../styles/Home.module.css'
import CSVDownloader from './CsvDownloader'

const Home: NextPage = () => {
  const [csvContent, setCsvContent] = useState<Array<any>>([]);
  const [csvContentCompare, setCsvContentCompare] = useState<Array<any>>([]);
  const [csvCompare, setCsvCompare] = useState<Array<any>>([]);
  
  const getMasterFile = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!(e.target instanceof HTMLInputElement)) return
    if (!e.target.files) return
    const file = e.target.files[0]
    if(!file.name.match('.csv$')) {
      alert('CSVファイルを選択してください');
      return;
    }
    const master_file = await file.text()
    const config: any = {
      worker: true,
      complete: (results: any) => {
        setCsvContent(results.data);
      }
    };
    readString(master_file, config);
  }

  const getCompareFile = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!(e.target instanceof HTMLInputElement)) return
    if (!e.target.files) return
    const file = e.target.files[0]
    if(!file.name.match('.csv$')) {
      alert('CSVファイルを選択してください');
      return;
    }
    const master_file = await file.text()
    const config: any = {
      worker: true,
      complete: (results: any) => {
        setCsvContentCompare(results.data);
      }
    };
    readString(master_file, config);
  }

  const checkRow = () => {
      const csv_content_row_length = ([...csvContent].length)
      const csv_content_compare_row_length = ([...csvContentCompare].length)
      const csv_content_col_length = ([...csvContent[0]].length)
      const csv_contetn_compare_col_length = ([...csvContentCompare[0]].length)
      if (csv_content_row_length != csv_content_compare_row_length) {
        return
      }
      if (csv_content_col_length != csv_contetn_compare_col_length) {
        return
      }

      let diff_list = []
      for (let count=0; count<csv_content_row_length; count++) {
        for (let sub_count=0; sub_count<csv_content_col_length; sub_count++) {
          let content = [...csvContent[count]][sub_count]
          let compare = [...csvContentCompare[count]][sub_count]
          if (content != compare) {
            diff_list.push(
              [
                ...csvContentCompare[count],
                ...csvContent[count]
              ]
            )
          }
        }
      }
      alert(
        `
        一致しない値があった行は、${diff_list.length}個でした。
        `
      )
      setCsvCompare(diff_list);
  }

  const checkRowCol = () => {
    const csv_content_row_length = ([...csvContent].length)
    const csv_content_compare_row_length = ([...csvContentCompare].length)
    const csv_content_col_length = ([...csvContent[0]].length)
    const csv_contetn_compare_col_length = ([...csvContentCompare[0]].length)
    if (csv_content_row_length != csv_content_compare_row_length) {
      return
    }
    if (csv_content_col_length != csv_contetn_compare_col_length) {
      return
    }

    let diff_list = []
    for (let count=0; count<csv_content_row_length; count++) {
      for (let sub_count=0; sub_count<csv_content_col_length; sub_count++) {
        let content = [...csvContent[count]][sub_count]
        let compare = [...csvContentCompare[count]][sub_count]
        if (content != compare) {
          diff_list.push(
            [
              compare
            ]
          )
        }
      }
    }
    alert(
      `
      一致しない値は、${diff_list.length}個でした。
      `
    )
    setCsvCompare(diff_list);
  }
  
  return (
    <div className={styles.container}>
      <Head>
        <title>CSVひかくん｜CSV比較ツール</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          CSVひかくん
        </h1>
        <p>
          <Link href={"/Description"}>
            CSV比較比較具体的な使い方を見る
          </Link>
        </p>
        <p>
          <Link href={"/Description"}>
            具体的な使い方を見る
          </Link>
        </p>

        <div className={styles.grid}>
          <h2>
            マスターデータ -比較の際、マスターになるデータを入れます！
          </h2>
          <input type="file" accept="text/csv" onChange={getMasterFile} />
        </div>

        <div className={styles.grid}>
          <h2>
            比較データ -比較の際、マスターと比較したいデータを入れます！
          </h2>
          <input type="file" accept="text/csv" onChange={getCompareFile} />
        </div>

        <div className={styles.grid}>
          <button onClick={checkRow}>
            <h2>
              一致しない値が含まれた行が何個あるかを検出する。
            </h2>
          </button>
        </div>

        <div className={styles.grid}>
          <button onClick={checkRowCol}>
            <h2>
              一致しない値だけを検出する。
            </h2>
          </button>
        </div>

        <div className={styles.grid}>
          <CSVDownloader data={csvCompare}/>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
